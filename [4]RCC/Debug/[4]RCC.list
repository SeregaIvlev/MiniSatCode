
[4]RCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002f4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000424  0800042c  0001042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000424  08000424  0001042c  2**0
                  CONTENTS
  4 .ARM          00000000  08000424  08000424  0001042c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000424  0800042c  0001042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000424  08000424  00010424  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000428  08000428  00010428  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001042c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800042c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800042c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001042c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000597  00000000  00000000  00010455  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001f2  00000000  00000000  000109ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000098  00000000  00000000  00010be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000070  00000000  00000000  00010c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ff7d  00000000  00000000  00010ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000009e7  00000000  00000000  00020c65  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005404c  00000000  00000000  0002164c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00075698  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000014c  00000000  00000000  00075714  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800040c 	.word	0x0800040c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800040c 	.word	0x0800040c

08000170 <ButtonInit>:
#include "GPIO.h"



/*********************************** Button *************************************************************/
void ButtonInit(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (RCC_APB2ENR_IOPBEN); //Enable clock for PORTB
 8000174:	4b13      	ldr	r3, [pc, #76]	; (80001c4 <ButtonInit+0x54>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a12      	ldr	r2, [pc, #72]	; (80001c4 <ButtonInit+0x54>)
 800017a:	f043 0308 	orr.w	r3, r3, #8
 800017e:	6193      	str	r3, [r2, #24]

	GPIOB->CRH &= ~(GPIO_CRH_MODE9_1); GPIOB->CRH &= ~(GPIO_CRH_MODE9_0); 	//Set input mode
 8000180:	4b11      	ldr	r3, [pc, #68]	; (80001c8 <ButtonInit+0x58>)
 8000182:	685b      	ldr	r3, [r3, #4]
 8000184:	4a10      	ldr	r2, [pc, #64]	; (80001c8 <ButtonInit+0x58>)
 8000186:	f023 0320 	bic.w	r3, r3, #32
 800018a:	6053      	str	r3, [r2, #4]
 800018c:	4b0e      	ldr	r3, [pc, #56]	; (80001c8 <ButtonInit+0x58>)
 800018e:	685b      	ldr	r3, [r3, #4]
 8000190:	4a0d      	ldr	r2, [pc, #52]	; (80001c8 <ButtonInit+0x58>)
 8000192:	f023 0310 	bic.w	r3, r3, #16
 8000196:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (GPIO_CRH_CNF9_1);  GPIOB->CRH &= ~(GPIO_CRH_CNF9_0); 	//Pull-up/down mode
 8000198:	4b0b      	ldr	r3, [pc, #44]	; (80001c8 <ButtonInit+0x58>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4a0a      	ldr	r2, [pc, #40]	; (80001c8 <ButtonInit+0x58>)
 800019e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001a2:	6053      	str	r3, [r2, #4]
 80001a4:	4b08      	ldr	r3, [pc, #32]	; (80001c8 <ButtonInit+0x58>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4a07      	ldr	r2, [pc, #28]	; (80001c8 <ButtonInit+0x58>)
 80001aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80001ae:	6053      	str	r3, [r2, #4]

	GPIOB->ODR |= (GPIO_ODR_ODR9);	//Chose pull-up
 80001b0:	4b05      	ldr	r3, [pc, #20]	; (80001c8 <ButtonInit+0x58>)
 80001b2:	68db      	ldr	r3, [r3, #12]
 80001b4:	4a04      	ldr	r2, [pc, #16]	; (80001c8 <ButtonInit+0x58>)
 80001b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001ba:	60d3      	str	r3, [r2, #12]
}
 80001bc:	bf00      	nop
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	40021000 	.word	0x40021000
 80001c8:	40010c00 	.word	0x40010c00

080001cc <LED_Init>:
	return !(GPIOB->IDR & (GPIO_IDR_IDR9));
}


/************************************** LED *************************************************************/
void LED_Init(){
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (RCC_APB2ENR_IOPCEN); //Enable clock for PORTC
 80001d0:	4b13      	ldr	r3, [pc, #76]	; (8000220 <LED_Init+0x54>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	4a12      	ldr	r2, [pc, #72]	; (8000220 <LED_Init+0x54>)
 80001d6:	f043 0310 	orr.w	r3, r3, #16
 80001da:	6193      	str	r3, [r2, #24]

	GPIOC->CRH |= (GPIO_CRH_MODE13_1);  GPIOC->CRH &= ~(GPIO_CRH_MODE13_0); //Set output mode
 80001dc:	4b11      	ldr	r3, [pc, #68]	; (8000224 <LED_Init+0x58>)
 80001de:	685b      	ldr	r3, [r3, #4]
 80001e0:	4a10      	ldr	r2, [pc, #64]	; (8000224 <LED_Init+0x58>)
 80001e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001e6:	6053      	str	r3, [r2, #4]
 80001e8:	4b0e      	ldr	r3, [pc, #56]	; (8000224 <LED_Init+0x58>)
 80001ea:	685b      	ldr	r3, [r3, #4]
 80001ec:	4a0d      	ldr	r2, [pc, #52]	; (8000224 <LED_Init+0x58>)
 80001ee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80001f2:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~(GPIO_CRH_CNF13_1); GPIOC->CRH &= ~(GPIO_CRH_CNF13_0); //Set push-pull mode
 80001f4:	4b0b      	ldr	r3, [pc, #44]	; (8000224 <LED_Init+0x58>)
 80001f6:	685b      	ldr	r3, [r3, #4]
 80001f8:	4a0a      	ldr	r2, [pc, #40]	; (8000224 <LED_Init+0x58>)
 80001fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80001fe:	6053      	str	r3, [r2, #4]
 8000200:	4b08      	ldr	r3, [pc, #32]	; (8000224 <LED_Init+0x58>)
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	4a07      	ldr	r2, [pc, #28]	; (8000224 <LED_Init+0x58>)
 8000206:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800020a:	6053      	str	r3, [r2, #4]

	GPIOC->ODR |= (1<<13); 	//Светодиод выключается при подаче единицы
 800020c:	4b05      	ldr	r3, [pc, #20]	; (8000224 <LED_Init+0x58>)
 800020e:	68db      	ldr	r3, [r3, #12]
 8000210:	4a04      	ldr	r2, [pc, #16]	; (8000224 <LED_Init+0x58>)
 8000212:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000216:	60d3      	str	r3, [r2, #12]
}
 8000218:	bf00      	nop
 800021a:	46bd      	mov	sp, r7
 800021c:	bc80      	pop	{r7}
 800021e:	4770      	bx	lr
 8000220:	40021000 	.word	0x40021000
 8000224:	40011000 	.word	0x40011000

08000228 <RCC_Init>:

#include "main.h"


void RCC_Init()
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
	RCC->CR |= (RCC_CR_HSEON);
 800022c:	4b3f      	ldr	r3, [pc, #252]	; (800032c <RCC_Init+0x104>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a3e      	ldr	r2, [pc, #248]	; (800032c <RCC_Init+0x104>)
 8000232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000236:	6013      	str	r3, [r2, #0]
	while( !(RCC->CR & RCC_CR_HSERDY) );
 8000238:	bf00      	nop
 800023a:	4b3c      	ldr	r3, [pc, #240]	; (800032c <RCC_Init+0x104>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000242:	2b00      	cmp	r3, #0
 8000244:	d0f9      	beq.n	800023a <RCC_Init+0x12>

	FLASH->ACR &= ~(FLASH_ACR_PRFTBE);
 8000246:	4b3a      	ldr	r3, [pc, #232]	; (8000330 <RCC_Init+0x108>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a39      	ldr	r2, [pc, #228]	; (8000330 <RCC_Init+0x108>)
 800024c:	f023 0310 	bic.w	r3, r3, #16
 8000250:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= (FLASH_ACR_PRFTBE);
 8000252:	4b37      	ldr	r3, [pc, #220]	; (8000330 <RCC_Init+0x108>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a36      	ldr	r2, [pc, #216]	; (8000330 <RCC_Init+0x108>)
 8000258:	f043 0310 	orr.w	r3, r3, #16
 800025c:	6013      	str	r3, [r2, #0]

	FLASH->ACR &= ~(FLASH_ACR_LATENCY_0 | FLASH_ACR_LATENCY_2);
 800025e:	4b34      	ldr	r3, [pc, #208]	; (8000330 <RCC_Init+0x108>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4a33      	ldr	r2, [pc, #204]	; (8000330 <RCC_Init+0x108>)
 8000264:	f023 0305 	bic.w	r3, r3, #5
 8000268:	6013      	str	r3, [r2, #0]
	FLASH->ACR |= FLASH_ACR_LATENCY_1;
 800026a:	4b31      	ldr	r3, [pc, #196]	; (8000330 <RCC_Init+0x108>)
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	4a30      	ldr	r2, [pc, #192]	; (8000330 <RCC_Init+0x108>)
 8000270:	f043 0302 	orr.w	r3, r3, #2
 8000274:	6013      	str	r3, [r2, #0]


	RCC->CFGR |= RCC_CFGR_PLLXTPRE;
 8000276:	4b2d      	ldr	r3, [pc, #180]	; (800032c <RCC_Init+0x104>)
 8000278:	685b      	ldr	r3, [r3, #4]
 800027a:	4a2c      	ldr	r2, [pc, #176]	; (800032c <RCC_Init+0x104>)
 800027c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000280:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLSRC;
 8000282:	4b2a      	ldr	r3, [pc, #168]	; (800032c <RCC_Init+0x104>)
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	4a29      	ldr	r2, [pc, #164]	; (800032c <RCC_Init+0x104>)
 8000288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800028c:	6053      	str	r3, [r2, #4]

	RCC->CFGR &= ~(RCC_CFGR_PLLMULL_3 | RCC_CFGR_PLLMULL_2 | RCC_CFGR_PLLMULL_1 | RCC_CFGR_PLLMULL_0 );
 800028e:	4b27      	ldr	r3, [pc, #156]	; (800032c <RCC_Init+0x104>)
 8000290:	685b      	ldr	r3, [r3, #4]
 8000292:	4a26      	ldr	r2, [pc, #152]	; (800032c <RCC_Init+0x104>)
 8000294:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 8000298:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_PLLMULL6;
 800029a:	4b24      	ldr	r3, [pc, #144]	; (800032c <RCC_Init+0x104>)
 800029c:	685b      	ldr	r3, [r3, #4]
 800029e:	4a23      	ldr	r2, [pc, #140]	; (800032c <RCC_Init+0x104>)
 80002a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002a4:	6053      	str	r3, [r2, #4]

	RCC->CFGR &= ~(RCC_CFGR_PPRE2_2 | RCC_CFGR_PPRE2_1 | RCC_CFGR_PPRE2_0 );
 80002a6:	4b21      	ldr	r3, [pc, #132]	; (800032c <RCC_Init+0x104>)
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	4a20      	ldr	r2, [pc, #128]	; (800032c <RCC_Init+0x104>)
 80002ac:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80002b0:	6053      	str	r3, [r2, #4]
	RCC->CFGR &= ~(RCC_CFGR_PPRE1_2 | RCC_CFGR_PPRE1_1 | RCC_CFGR_PPRE1_0 );
 80002b2:	4b1e      	ldr	r3, [pc, #120]	; (800032c <RCC_Init+0x104>)
 80002b4:	685b      	ldr	r3, [r3, #4]
 80002b6:	4a1d      	ldr	r2, [pc, #116]	; (800032c <RCC_Init+0x104>)
 80002b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80002bc:	6053      	str	r3, [r2, #4]

	RCC->CFGR |= (RCC_CFGR_PPRE2_2);
 80002be:	4b1b      	ldr	r3, [pc, #108]	; (800032c <RCC_Init+0x104>)
 80002c0:	685b      	ldr	r3, [r3, #4]
 80002c2:	4a1a      	ldr	r2, [pc, #104]	; (800032c <RCC_Init+0x104>)
 80002c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002c8:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (RCC_CFGR_PPRE1_2);
 80002ca:	4b18      	ldr	r3, [pc, #96]	; (800032c <RCC_Init+0x104>)
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	4a17      	ldr	r2, [pc, #92]	; (800032c <RCC_Init+0x104>)
 80002d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d4:	6053      	str	r3, [r2, #4]


	RCC->CFGR &= ~(RCC_CFGR_HPRE_3 | RCC_CFGR_HPRE_2 | RCC_CFGR_HPRE_1 | RCC_CFGR_HPRE_0 );
 80002d6:	4b15      	ldr	r3, [pc, #84]	; (800032c <RCC_Init+0x104>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	4a14      	ldr	r2, [pc, #80]	; (800032c <RCC_Init+0x104>)
 80002dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80002e0:	6053      	str	r3, [r2, #4]

	RCC->CR |= (RCC_CR_PLLON);
 80002e2:	4b12      	ldr	r3, [pc, #72]	; (800032c <RCC_Init+0x104>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	4a11      	ldr	r2, [pc, #68]	; (800032c <RCC_Init+0x104>)
 80002e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002ec:	6013      	str	r3, [r2, #0]
	while( !(RCC->CR & RCC_CR_PLLRDY));
 80002ee:	bf00      	nop
 80002f0:	4b0e      	ldr	r3, [pc, #56]	; (800032c <RCC_Init+0x104>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d0f9      	beq.n	80002f0 <RCC_Init+0xc8>

	RCC->CFGR &= ~(RCC_CFGR_SW_1 | RCC_CFGR_SW_0);
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <RCC_Init+0x104>)
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	4a0a      	ldr	r2, [pc, #40]	; (800032c <RCC_Init+0x104>)
 8000302:	f023 0303 	bic.w	r3, r3, #3
 8000306:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= RCC_CFGR_SW_1;
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <RCC_Init+0x104>)
 800030a:	685b      	ldr	r3, [r3, #4]
 800030c:	4a07      	ldr	r2, [pc, #28]	; (800032c <RCC_Init+0x104>)
 800030e:	f043 0302 	orr.w	r3, r3, #2
 8000312:	6053      	str	r3, [r2, #4]
	while(  (RCC->CFGR & (RCC_CFGR_SWS_1 | RCC_CFGR_SWS_0))    !=  RCC_CFGR_SWS_1);
 8000314:	bf00      	nop
 8000316:	4b05      	ldr	r3, [pc, #20]	; (800032c <RCC_Init+0x104>)
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	f003 030c 	and.w	r3, r3, #12
 800031e:	2b08      	cmp	r3, #8
 8000320:	d1f9      	bne.n	8000316 <RCC_Init+0xee>
}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	bc80      	pop	{r7}
 8000328:	4770      	bx	lr
 800032a:	bf00      	nop
 800032c:	40021000 	.word	0x40021000
 8000330:	40022000 	.word	0x40022000

08000334 <main>:

int main(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
	RCC_Init();
 800033a:	f7ff ff75 	bl	8000228 <RCC_Init>
	LED_Init();
 800033e:	f7ff ff45 	bl	80001cc <LED_Init>
	ButtonInit();
 8000342:	f7ff ff15 	bl	8000170 <ButtonInit>

    /* Loop forever */
	while(1){


		GPIOC->ODR ^= (1<<13); 	//Toggle ODR pin
 8000346:	4b08      	ldr	r3, [pc, #32]	; (8000368 <main+0x34>)
 8000348:	68db      	ldr	r3, [r3, #12]
 800034a:	4a07      	ldr	r2, [pc, #28]	; (8000368 <main+0x34>)
 800034c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000350:	60d3      	str	r3, [r2, #12]
		for(uint32_t cnt = 0; cnt < 1000000; cnt++); //Simply delay
 8000352:	2300      	movs	r3, #0
 8000354:	607b      	str	r3, [r7, #4]
 8000356:	e002      	b.n	800035e <main+0x2a>
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	3301      	adds	r3, #1
 800035c:	607b      	str	r3, [r7, #4]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a02      	ldr	r2, [pc, #8]	; (800036c <main+0x38>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d9f8      	bls.n	8000358 <main+0x24>
		GPIOC->ODR ^= (1<<13); 	//Toggle ODR pin
 8000366:	e7ee      	b.n	8000346 <main+0x12>
 8000368:	40011000 	.word	0x40011000
 800036c:	000f423f 	.word	0x000f423f

08000370 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000370:	480d      	ldr	r0, [pc, #52]	; (80003a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000372:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000374:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000378:	480c      	ldr	r0, [pc, #48]	; (80003ac <LoopForever+0x6>)
  ldr r1, =_edata
 800037a:	490d      	ldr	r1, [pc, #52]	; (80003b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800037c:	4a0d      	ldr	r2, [pc, #52]	; (80003b4 <LoopForever+0xe>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000380:	e002      	b.n	8000388 <LoopCopyDataInit>

08000382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000386:	3304      	adds	r3, #4

08000388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800038c:	d3f9      	bcc.n	8000382 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038e:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000390:	4c0a      	ldr	r4, [pc, #40]	; (80003bc <LoopForever+0x16>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000394:	e001      	b.n	800039a <LoopFillZerobss>

08000396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000398:	3204      	adds	r2, #4

0800039a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800039c:	d3fb      	bcc.n	8000396 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800039e:	f000 f811 	bl	80003c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003a2:	f7ff ffc7 	bl	8000334 <main>

080003a6 <LoopForever>:

LoopForever:
    b LoopForever
 80003a6:	e7fe      	b.n	80003a6 <LoopForever>
  ldr   r0, =_estack
 80003a8:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80003ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003b4:	0800042c 	.word	0x0800042c
  ldr r2, =_sbss
 80003b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003bc:	2000001c 	.word	0x2000001c

080003c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003c0:	e7fe      	b.n	80003c0 <ADC1_2_IRQHandler>
	...

080003c4 <__libc_init_array>:
 80003c4:	b570      	push	{r4, r5, r6, lr}
 80003c6:	2500      	movs	r5, #0
 80003c8:	4e0c      	ldr	r6, [pc, #48]	; (80003fc <__libc_init_array+0x38>)
 80003ca:	4c0d      	ldr	r4, [pc, #52]	; (8000400 <__libc_init_array+0x3c>)
 80003cc:	1ba4      	subs	r4, r4, r6
 80003ce:	10a4      	asrs	r4, r4, #2
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	d109      	bne.n	80003e8 <__libc_init_array+0x24>
 80003d4:	f000 f81a 	bl	800040c <_init>
 80003d8:	2500      	movs	r5, #0
 80003da:	4e0a      	ldr	r6, [pc, #40]	; (8000404 <__libc_init_array+0x40>)
 80003dc:	4c0a      	ldr	r4, [pc, #40]	; (8000408 <__libc_init_array+0x44>)
 80003de:	1ba4      	subs	r4, r4, r6
 80003e0:	10a4      	asrs	r4, r4, #2
 80003e2:	42a5      	cmp	r5, r4
 80003e4:	d105      	bne.n	80003f2 <__libc_init_array+0x2e>
 80003e6:	bd70      	pop	{r4, r5, r6, pc}
 80003e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003ec:	4798      	blx	r3
 80003ee:	3501      	adds	r5, #1
 80003f0:	e7ee      	b.n	80003d0 <__libc_init_array+0xc>
 80003f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003f6:	4798      	blx	r3
 80003f8:	3501      	adds	r5, #1
 80003fa:	e7f2      	b.n	80003e2 <__libc_init_array+0x1e>
 80003fc:	08000424 	.word	0x08000424
 8000400:	08000424 	.word	0x08000424
 8000404:	08000424 	.word	0x08000424
 8000408:	08000428 	.word	0x08000428

0800040c <_init>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr

08000418 <_fini>:
 8000418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800041a:	bf00      	nop
 800041c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800041e:	bc08      	pop	{r3}
 8000420:	469e      	mov	lr, r3
 8000422:	4770      	bx	lr
