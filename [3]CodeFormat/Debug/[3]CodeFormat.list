
[3]CodeFormat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001fc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800032c  08000334  00010334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800032c  0800032c  00010334  2**0
                  CONTENTS
  4 .ARM          00000000  0800032c  0800032c  00010334  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800032c  08000334  00010334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800032c  0800032c  0001032c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000330  08000330  00010330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000334  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000334  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010334  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000044a  00000000  00000000  0001035d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001c2  00000000  00000000  000107a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000090  00000000  00000000  00010970  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000068  00000000  00000000  00010a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000ff7d  00000000  00000000  00010a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000009b0  00000000  00000000  000209e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00053fed  00000000  00000000  00021395  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00075382  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000128  00000000  00000000  00075400  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000314 	.word	0x08000314

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000314 	.word	0x08000314

08000170 <ButtonInit>:
#include "GPIO.h"



/*********************************** Button *************************************************************/
void ButtonInit(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (RCC_APB2ENR_IOPBEN); //Enable clock for PORTB
 8000174:	4b13      	ldr	r3, [pc, #76]	; (80001c4 <ButtonInit+0x54>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a12      	ldr	r2, [pc, #72]	; (80001c4 <ButtonInit+0x54>)
 800017a:	f043 0308 	orr.w	r3, r3, #8
 800017e:	6193      	str	r3, [r2, #24]

	GPIOB->CRH &= ~(GPIO_CRH_MODE9_1); GPIOB->CRH &= ~(GPIO_CRH_MODE9_0); 	//Set input mode
 8000180:	4b11      	ldr	r3, [pc, #68]	; (80001c8 <ButtonInit+0x58>)
 8000182:	685b      	ldr	r3, [r3, #4]
 8000184:	4a10      	ldr	r2, [pc, #64]	; (80001c8 <ButtonInit+0x58>)
 8000186:	f023 0320 	bic.w	r3, r3, #32
 800018a:	6053      	str	r3, [r2, #4]
 800018c:	4b0e      	ldr	r3, [pc, #56]	; (80001c8 <ButtonInit+0x58>)
 800018e:	685b      	ldr	r3, [r3, #4]
 8000190:	4a0d      	ldr	r2, [pc, #52]	; (80001c8 <ButtonInit+0x58>)
 8000192:	f023 0310 	bic.w	r3, r3, #16
 8000196:	6053      	str	r3, [r2, #4]
	GPIOB->CRH |= (GPIO_CRH_CNF9_1);  GPIOB->CRH &= ~(GPIO_CRH_CNF9_0); 	//Pull-up/down mode
 8000198:	4b0b      	ldr	r3, [pc, #44]	; (80001c8 <ButtonInit+0x58>)
 800019a:	685b      	ldr	r3, [r3, #4]
 800019c:	4a0a      	ldr	r2, [pc, #40]	; (80001c8 <ButtonInit+0x58>)
 800019e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001a2:	6053      	str	r3, [r2, #4]
 80001a4:	4b08      	ldr	r3, [pc, #32]	; (80001c8 <ButtonInit+0x58>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4a07      	ldr	r2, [pc, #28]	; (80001c8 <ButtonInit+0x58>)
 80001aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80001ae:	6053      	str	r3, [r2, #4]

	GPIOB->ODR |= (GPIO_ODR_ODR9);	//Chose pull-up
 80001b0:	4b05      	ldr	r3, [pc, #20]	; (80001c8 <ButtonInit+0x58>)
 80001b2:	68db      	ldr	r3, [r3, #12]
 80001b4:	4a04      	ldr	r2, [pc, #16]	; (80001c8 <ButtonInit+0x58>)
 80001b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001ba:	60d3      	str	r3, [r2, #12]
}
 80001bc:	bf00      	nop
 80001be:	46bd      	mov	sp, r7
 80001c0:	bc80      	pop	{r7}
 80001c2:	4770      	bx	lr
 80001c4:	40021000 	.word	0x40021000
 80001c8:	40010c00 	.word	0x40010c00

080001cc <ButtonRead>:
uint32_t ButtonRead(){
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
	return !(GPIOB->IDR & (GPIO_IDR_IDR9));
 80001d0:	4b06      	ldr	r3, [pc, #24]	; (80001ec <ButtonRead+0x20>)
 80001d2:	689b      	ldr	r3, [r3, #8]
 80001d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80001d8:	2b00      	cmp	r3, #0
 80001da:	bf0c      	ite	eq
 80001dc:	2301      	moveq	r3, #1
 80001de:	2300      	movne	r3, #0
 80001e0:	b2db      	uxtb	r3, r3
}
 80001e2:	4618      	mov	r0, r3
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	40010c00 	.word	0x40010c00

080001f0 <LED_Init>:


/************************************** LED *************************************************************/
void LED_Init(){
 80001f0:	b480      	push	{r7}
 80001f2:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (RCC_APB2ENR_IOPCEN); //Enable clock for PORTC
 80001f4:	4b13      	ldr	r3, [pc, #76]	; (8000244 <LED_Init+0x54>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a12      	ldr	r2, [pc, #72]	; (8000244 <LED_Init+0x54>)
 80001fa:	f043 0310 	orr.w	r3, r3, #16
 80001fe:	6193      	str	r3, [r2, #24]

	GPIOC->CRH |= (GPIO_CRH_MODE13_1);  GPIOC->CRH &= ~(GPIO_CRH_MODE13_0); //Set output mode
 8000200:	4b11      	ldr	r3, [pc, #68]	; (8000248 <LED_Init+0x58>)
 8000202:	685b      	ldr	r3, [r3, #4]
 8000204:	4a10      	ldr	r2, [pc, #64]	; (8000248 <LED_Init+0x58>)
 8000206:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800020a:	6053      	str	r3, [r2, #4]
 800020c:	4b0e      	ldr	r3, [pc, #56]	; (8000248 <LED_Init+0x58>)
 800020e:	685b      	ldr	r3, [r3, #4]
 8000210:	4a0d      	ldr	r2, [pc, #52]	; (8000248 <LED_Init+0x58>)
 8000212:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000216:	6053      	str	r3, [r2, #4]
	GPIOC->CRH &= ~(GPIO_CRH_CNF13_1); GPIOC->CRH &= ~(GPIO_CRH_CNF13_0); //Set push-pull mode
 8000218:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <LED_Init+0x58>)
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	4a0a      	ldr	r2, [pc, #40]	; (8000248 <LED_Init+0x58>)
 800021e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000222:	6053      	str	r3, [r2, #4]
 8000224:	4b08      	ldr	r3, [pc, #32]	; (8000248 <LED_Init+0x58>)
 8000226:	685b      	ldr	r3, [r3, #4]
 8000228:	4a07      	ldr	r2, [pc, #28]	; (8000248 <LED_Init+0x58>)
 800022a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800022e:	6053      	str	r3, [r2, #4]

	GPIOC->ODR |= (1<<13); 	//Светодиод выключается при подаче единицы
 8000230:	4b05      	ldr	r3, [pc, #20]	; (8000248 <LED_Init+0x58>)
 8000232:	68db      	ldr	r3, [r3, #12]
 8000234:	4a04      	ldr	r2, [pc, #16]	; (8000248 <LED_Init+0x58>)
 8000236:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800023a:	60d3      	str	r3, [r2, #12]
}
 800023c:	bf00      	nop
 800023e:	46bd      	mov	sp, r7
 8000240:	bc80      	pop	{r7}
 8000242:	4770      	bx	lr
 8000244:	40021000 	.word	0x40021000
 8000248:	40011000 	.word	0x40011000

0800024c <main>:




int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	LED_Init();
 8000250:	f7ff ffce 	bl	80001f0 <LED_Init>
	ButtonInit();
 8000254:	f7ff ff8c 	bl	8000170 <ButtonInit>

    /* Loop forever */
	while(1){
		if(ButtonRead())
 8000258:	f7ff ffb8 	bl	80001cc <ButtonRead>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d003      	beq.n	800026a <main+0x1e>
			GPIOC->ODR = 0;
 8000262:	4b04      	ldr	r3, [pc, #16]	; (8000274 <main+0x28>)
 8000264:	2200      	movs	r2, #0
 8000266:	60da      	str	r2, [r3, #12]
 8000268:	e7f6      	b.n	8000258 <main+0xc>
		else
			GPIOC->ODR = (1<<13);
 800026a:	4b02      	ldr	r3, [pc, #8]	; (8000274 <main+0x28>)
 800026c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000270:	60da      	str	r2, [r3, #12]
		if(ButtonRead())
 8000272:	e7f1      	b.n	8000258 <main+0xc>
 8000274:	40011000 	.word	0x40011000

08000278 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000278:	480d      	ldr	r0, [pc, #52]	; (80002b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800027c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000280:	480c      	ldr	r0, [pc, #48]	; (80002b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000282:	490d      	ldr	r1, [pc, #52]	; (80002b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000284:	4a0d      	ldr	r2, [pc, #52]	; (80002bc <LoopForever+0xe>)
  movs r3, #0
 8000286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000288:	e002      	b.n	8000290 <LoopCopyDataInit>

0800028a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800028c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028e:	3304      	adds	r3, #4

08000290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000294:	d3f9      	bcc.n	800028a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000298:	4c0a      	ldr	r4, [pc, #40]	; (80002c4 <LoopForever+0x16>)
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800029c:	e001      	b.n	80002a2 <LoopFillZerobss>

0800029e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a0:	3204      	adds	r2, #4

080002a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a4:	d3fb      	bcc.n	800029e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002a6:	f000 f811 	bl	80002cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002aa:	f7ff ffcf 	bl	800024c <main>

080002ae <LoopForever>:

LoopForever:
    b LoopForever
 80002ae:	e7fe      	b.n	80002ae <LoopForever>
  ldr   r0, =_estack
 80002b0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80002b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002bc:	08000334 	.word	0x08000334
  ldr r2, =_sbss
 80002c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c4:	2000001c 	.word	0x2000001c

080002c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c8:	e7fe      	b.n	80002c8 <ADC1_2_IRQHandler>
	...

080002cc <__libc_init_array>:
 80002cc:	b570      	push	{r4, r5, r6, lr}
 80002ce:	2500      	movs	r5, #0
 80002d0:	4e0c      	ldr	r6, [pc, #48]	; (8000304 <__libc_init_array+0x38>)
 80002d2:	4c0d      	ldr	r4, [pc, #52]	; (8000308 <__libc_init_array+0x3c>)
 80002d4:	1ba4      	subs	r4, r4, r6
 80002d6:	10a4      	asrs	r4, r4, #2
 80002d8:	42a5      	cmp	r5, r4
 80002da:	d109      	bne.n	80002f0 <__libc_init_array+0x24>
 80002dc:	f000 f81a 	bl	8000314 <_init>
 80002e0:	2500      	movs	r5, #0
 80002e2:	4e0a      	ldr	r6, [pc, #40]	; (800030c <__libc_init_array+0x40>)
 80002e4:	4c0a      	ldr	r4, [pc, #40]	; (8000310 <__libc_init_array+0x44>)
 80002e6:	1ba4      	subs	r4, r4, r6
 80002e8:	10a4      	asrs	r4, r4, #2
 80002ea:	42a5      	cmp	r5, r4
 80002ec:	d105      	bne.n	80002fa <__libc_init_array+0x2e>
 80002ee:	bd70      	pop	{r4, r5, r6, pc}
 80002f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002f4:	4798      	blx	r3
 80002f6:	3501      	adds	r5, #1
 80002f8:	e7ee      	b.n	80002d8 <__libc_init_array+0xc>
 80002fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002fe:	4798      	blx	r3
 8000300:	3501      	adds	r5, #1
 8000302:	e7f2      	b.n	80002ea <__libc_init_array+0x1e>
 8000304:	0800032c 	.word	0x0800032c
 8000308:	0800032c 	.word	0x0800032c
 800030c:	0800032c 	.word	0x0800032c
 8000310:	08000330 	.word	0x08000330

08000314 <_init>:
 8000314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000316:	bf00      	nop
 8000318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031a:	bc08      	pop	{r3}
 800031c:	469e      	mov	lr, r3
 800031e:	4770      	bx	lr

08000320 <_fini>:
 8000320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000322:	bf00      	nop
 8000324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000326:	bc08      	pop	{r3}
 8000328:	469e      	mov	lr, r3
 800032a:	4770      	bx	lr
